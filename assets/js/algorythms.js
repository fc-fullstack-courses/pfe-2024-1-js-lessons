// Алгоритми - певна послідовність дій які дають бажаний кінцевий результат

// 1. прийняти рядок тексту та масив голосних
function getVowelsNumber(str, vowelArray = ['a', 'e', 'i', 'o', 'u']) {
  // 2. переконатися що нам дали саме рядок тексту
  // if (typeof str !== 'string' || !str.trim()) {
  //   throw new TypeError('Type of data is incorrect! Enter a valid string!');
  // }

  // 3. створити лічільник голосних у рядку
  let vowelCount = 0;
  let lowerCaseStr = str.toLowerCase();

  // 4. пройтись циклом по рядку і для кожної літери перевірити че є вона у масиві голосних
  for (let i = 0; i < lowerCaseStr.length; i++) {
    // 4.1 якщо літера є у списку то збільшити лічільник
    if (vowelArray.includes(lowerCaseStr[i])) {
      vowelCount++;
    }
  }

  // 5. повернути значення лічільника
  return vowelCount;
}

/*
  оцінка швидкості алогритму у часі робиться по кількості його операцій
  оцінка алогритму по займаній пам'яті 

  y = х (лінійна функція)
  y = х ^ 2 (квадратична)
  y = log х (логаріфмічна)
  y = 2 ^ х (експоненціальна)
  y = х! (факторіал)

  при оцінці алгоритмів по часу:
    y - кількість операцій
    x - вхідні дані

  y = x^2 + 5x + 15
  y = 2^x + 55

  x = 1
  y = 1^2 + 5*1 + 15 = 21
  y = 1 + 55 = 56

  x = 8
  y = 8^2 + 5*8 + 15 = 119 операцій
  y = 2^8 + 55 = 311 операцій

  x = 200
  y = 40000 + 1000 + 15 = 41015
  y = 1.6 * 1000000000000000000000000000000000000000000000000000 + 55

  Розрахунок складності алгоритмів
  x -> n (вхідні дані )
  y = n -> O(n)
  y = 2^n -> O(2^n)
*/

// O(1) - константна складність
const arr1 = [1,5,7,20,5];
function getElemOfArray (array, elemIndex) {
  return array[elemIndex];
}
